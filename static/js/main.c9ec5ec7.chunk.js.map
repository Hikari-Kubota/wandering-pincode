{"version":3,"sources":["components/PinCodeSetting.js","components/KeyForm.js","components/AuthResult.js","App.js","serviceWorker.js","index.js"],"names":["PinCodeSetting","react_default","a","createElement","className","map","idx","renderInputForm","Component","index","ToggleButtonGroup_default","value","exclusive","ToggleButton_default","TextField_default","placeholder","type","inputProps","min","max","step","KeyForm","readonly","rows","cols","renderInputButton","Button_default","variant","AuthResult","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pinCodes","inputs","PinCodeSetting_PinCodeSetting","KeyForm_KeyForm","AuthResult_AuthResult","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAMqBA,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACX,CAAC,EAAG,EAAG,EAAG,GAAGC,IAAI,SAAAC,GAAG,OAAIC,EAAgBD,aAJNE,aAUtCD,EAAkB,SAACE,GACrB,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAmBS,MAAM,OAAOC,WAAS,GACzCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAcS,MAAM,SAApB,WAIFV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAcS,MAAM,QAApB,UAGAV,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CACEE,UAAU,cACVW,YAAaN,EACbO,KAAK,SACLC,WAAY,CAAEC,IAAK,IAAKC,IAAK,IAAKC,KAAM,OAE1CnB,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAcS,MAAM,QAApB,WAIFV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAcS,MAAM,SAApB,+BCnCWU,mLAEjB,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,2CACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAWoB,UAAQ,KAErBrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,aACK,CAAC,EAAG,EAAG,GAAGE,IAAI,SAAAkB,GACb,OACEtB,EAAAC,EAAAC,cAAA,UACC,CAAC,EAAG,EAAG,GAAGE,IAAI,SAAAmB,GACb,OACEvB,EAAAC,EAAAC,cAAA,UACGsB,EAAkB,mBAhBNjB,aA+B/BiB,EAAoB,SAAChB,GACzB,OACER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,CAAQyB,QAAQ,YACblB,KCtCYmB,mLAEjB,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,cAJgCI,aCKnBqB,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACPC,SAAU,GACVC,OAAQ,IAJKT,wEASjB,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAD,eAfuBnC,aCKboC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c9ec5ec7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\n\nexport default class PinCodeSetting extends Component {\n  render() {\n    return (\n      <div className=\"pinCodeSettingContainer\">\n        { [1, 2, 3, 4].map(idx => renderInputForm(idx)) }\n      </div>\n    );\n  }\n}\n\nconst renderInputForm = (index) => {\n    return (\n      <div className=\"inputForm\">\n        <ToggleButtonGroup value=\"left\" exclusive>\n        <div className=\"inputFormElement\">\n          <ToggleButton value=\"north\">\n            北\n          </ToggleButton>\n        </div>\n        <div>\n          <ToggleButton value=\"west\">\n            西\n          </ToggleButton>\n          <TextField \n            className=\"numberField\"\n            placeholder={index} \n            type=\"number\" \n            inputProps={{ min: \"1\", max: \"9\", step: \"1\" }}\n            />\n          <ToggleButton value=\"east\">\n            東\n          </ToggleButton>\n        </div>\n        <div className=\"inputFormElement\">\n          <ToggleButton value=\"south\">\n            南\n          </ToggleButton>\n        </div>\n        </ToggleButtonGroup>\n      </div>\n    );\n  };\n\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n\nexport default class KeyForm extends Component {\n  render() {\n    return (\n      <div className=\"keyFormContainer\">\n        <p className=\"pinLabel\">PINコードを入力</p>\n        <div className=\"pinPreview\">\n          <TextField readonly />\n        </div>\n        <div className=\"pinKeyForm\">\n          <table>\n              {[0, 1, 2].map(rows => {\n                return (\n                  <tr>\n                  {[0, 1, 2].map(cols => {\n                    return (\n                      <td>\n                        {renderInputButton(1)}\n                      </td>\n                    );\n                  })}\n                  </tr>\n                );\n                })\n              }\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst renderInputButton = (index) => {\n  return (\n    <div>\n      <Button variant=\"outlined\">\n        {index}\n      </Button>\n    </div>\n  );\n};\n","import React, { Component } from 'react';\n\nexport default class AuthResult extends Component {\n  render() {\n    return (\n      <div className=\"authResultContainer\">\n        <p className=\"pinLabel\">OK</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport PinCodeSetting from './components/PinCodeSetting.js';\nimport KeyForm from './components/KeyForm.js';\nimport AuthResult from './components/AuthResult.js';\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n        pinCodes: [],\n        inputs: []\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <PinCodeSetting />\n          <KeyForm />\n          <AuthResult />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}